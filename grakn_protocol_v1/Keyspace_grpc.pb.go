// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grakn_protocol_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// KeyspaceServiceClient is the client API for KeyspaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyspaceServiceClient interface {
	Retrieve(ctx context.Context, in *Keyspace_Retrieve_Req, opts ...grpc.CallOption) (*Keyspace_Retrieve_Res, error)
	Delete(ctx context.Context, in *Keyspace_Delete_Req, opts ...grpc.CallOption) (*Keyspace_Delete_Res, error)
}

type keyspaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyspaceServiceClient(cc grpc.ClientConnInterface) KeyspaceServiceClient {
	return &keyspaceServiceClient{cc}
}

func (c *keyspaceServiceClient) Retrieve(ctx context.Context, in *Keyspace_Retrieve_Req, opts ...grpc.CallOption) (*Keyspace_Retrieve_Res, error) {
	out := new(Keyspace_Retrieve_Res)
	err := c.cc.Invoke(ctx, "/keyspace.KeyspaceService/retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyspaceServiceClient) Delete(ctx context.Context, in *Keyspace_Delete_Req, opts ...grpc.CallOption) (*Keyspace_Delete_Res, error) {
	out := new(Keyspace_Delete_Res)
	err := c.cc.Invoke(ctx, "/keyspace.KeyspaceService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyspaceServiceServer is the server API for KeyspaceService service.
// All implementations must embed UnimplementedKeyspaceServiceServer
// for forward compatibility
type KeyspaceServiceServer interface {
	Retrieve(context.Context, *Keyspace_Retrieve_Req) (*Keyspace_Retrieve_Res, error)
	Delete(context.Context, *Keyspace_Delete_Req) (*Keyspace_Delete_Res, error)
	mustEmbedUnimplementedKeyspaceServiceServer()
}

// UnimplementedKeyspaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyspaceServiceServer struct {
}

func (UnimplementedKeyspaceServiceServer) Retrieve(context.Context, *Keyspace_Retrieve_Req) (*Keyspace_Retrieve_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedKeyspaceServiceServer) Delete(context.Context, *Keyspace_Delete_Req) (*Keyspace_Delete_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKeyspaceServiceServer) mustEmbedUnimplementedKeyspaceServiceServer() {}

// UnsafeKeyspaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyspaceServiceServer will
// result in compilation errors.
type UnsafeKeyspaceServiceServer interface {
	mustEmbedUnimplementedKeyspaceServiceServer()
}

func RegisterKeyspaceServiceServer(s grpc.ServiceRegistrar, srv KeyspaceServiceServer) {
	s.RegisterService(&_KeyspaceService_serviceDesc, srv)
}

func _KeyspaceService_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keyspace_Retrieve_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServiceServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyspace.KeyspaceService/retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServiceServer).Retrieve(ctx, req.(*Keyspace_Retrieve_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyspaceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Keyspace_Delete_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyspace.KeyspaceService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServiceServer).Delete(ctx, req.(*Keyspace_Delete_Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyspaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keyspace.KeyspaceService",
	HandlerType: (*KeyspaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "retrieve",
			Handler:    _KeyspaceService_Retrieve_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _KeyspaceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf_v1/Keyspace.proto",
}
