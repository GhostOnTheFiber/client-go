// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grakn_protocol_cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GraknClusterClient is the client API for GraknCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraknClusterClient interface {
	ClusterServers(ctx context.Context, in *Cluster_Servers_Req, opts ...grpc.CallOption) (*Cluster_Servers_Res, error)
	DatabaseGet(ctx context.Context, in *Database_Get_Req, opts ...grpc.CallOption) (*Database_Get_Res, error)
	DatabaseAll(ctx context.Context, in *Database_All_Req, opts ...grpc.CallOption) (*Database_All_Res, error)
}

type graknClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewGraknClusterClient(cc grpc.ClientConnInterface) GraknClusterClient {
	return &graknClusterClient{cc}
}

func (c *graknClusterClient) ClusterServers(ctx context.Context, in *Cluster_Servers_Req, opts ...grpc.CallOption) (*Cluster_Servers_Res, error) {
	out := new(Cluster_Servers_Res)
	err := c.cc.Invoke(ctx, "/grakn.protocol.cluster.GraknCluster/cluster_servers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graknClusterClient) DatabaseGet(ctx context.Context, in *Database_Get_Req, opts ...grpc.CallOption) (*Database_Get_Res, error) {
	out := new(Database_Get_Res)
	err := c.cc.Invoke(ctx, "/grakn.protocol.cluster.GraknCluster/database_get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graknClusterClient) DatabaseAll(ctx context.Context, in *Database_All_Req, opts ...grpc.CallOption) (*Database_All_Res, error) {
	out := new(Database_All_Res)
	err := c.cc.Invoke(ctx, "/grakn.protocol.cluster.GraknCluster/database_all", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraknClusterServer is the server API for GraknCluster service.
// All implementations must embed UnimplementedGraknClusterServer
// for forward compatibility
type GraknClusterServer interface {
	ClusterServers(context.Context, *Cluster_Servers_Req) (*Cluster_Servers_Res, error)
	DatabaseGet(context.Context, *Database_Get_Req) (*Database_Get_Res, error)
	DatabaseAll(context.Context, *Database_All_Req) (*Database_All_Res, error)
	mustEmbedUnimplementedGraknClusterServer()
}

// UnimplementedGraknClusterServer must be embedded to have forward compatible implementations.
type UnimplementedGraknClusterServer struct {
}

func (UnimplementedGraknClusterServer) ClusterServers(context.Context, *Cluster_Servers_Req) (*Cluster_Servers_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterServers not implemented")
}
func (UnimplementedGraknClusterServer) DatabaseGet(context.Context, *Database_Get_Req) (*Database_Get_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseGet not implemented")
}
func (UnimplementedGraknClusterServer) DatabaseAll(context.Context, *Database_All_Req) (*Database_All_Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseAll not implemented")
}
func (UnimplementedGraknClusterServer) mustEmbedUnimplementedGraknClusterServer() {}

// UnsafeGraknClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraknClusterServer will
// result in compilation errors.
type UnsafeGraknClusterServer interface {
	mustEmbedUnimplementedGraknClusterServer()
}

func RegisterGraknClusterServer(s grpc.ServiceRegistrar, srv GraknClusterServer) {
	s.RegisterService(&_GraknCluster_serviceDesc, srv)
}

func _GraknCluster_ClusterServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster_Servers_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraknClusterServer).ClusterServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grakn.protocol.cluster.GraknCluster/cluster_servers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraknClusterServer).ClusterServers(ctx, req.(*Cluster_Servers_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraknCluster_DatabaseGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database_Get_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraknClusterServer).DatabaseGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grakn.protocol.cluster.GraknCluster/database_get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraknClusterServer).DatabaseGet(ctx, req.(*Database_Get_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraknCluster_DatabaseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Database_All_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraknClusterServer).DatabaseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grakn.protocol.cluster.GraknCluster/database_all",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraknClusterServer).DatabaseAll(ctx, req.(*Database_All_Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraknCluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grakn.protocol.cluster.GraknCluster",
	HandlerType: (*GraknClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "cluster_servers",
			Handler:    _GraknCluster_ClusterServers_Handler,
		},
		{
			MethodName: "database_get",
			Handler:    _GraknCluster_DatabaseGet_Handler,
		},
		{
			MethodName: "database_all",
			Handler:    _GraknCluster_DatabaseAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/protobuf/cluster/grakn_cluster.proto",
}
